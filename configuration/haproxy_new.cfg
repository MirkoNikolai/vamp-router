global
 pidfile /var/run/haproxy-private.pid

 daemon
 maxconn 4096
 stats socket /var/run/haproxy.stats.sock level admin


 ###
 #
 # Experimental: Logging Setup
 #
 # We log to a unix socket and read that socket from the Go program
 #
 #
 log /var/run/vamp.log.sock local0

 defaults
   log global
   mode http
   option dontlognull
   option redispatch
   option clitcpka
   option srvtcpka
   option http-keep-alive

   retries 3
   maxconn 500000

   # slowloris protection: clients should send their full http request in the configured time
   timeout http-request 5s

   timeout connect 5000ms
   timeout client 50000ms
   timeout server 50000ms

listen stats :1988
   mode http
   stats enable
   stats uri /
   stats refresh 2s
   stats realm Haproxy\ Stats
   stats auth showme:showme

### BEGIN GENERATED SECTION ###

frontend test_route_1
    
    bind 0.0.0.0:9025
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {\ "timestamp"\ :\ %t,\ "frontend"\ :\ "%f",\ "method"\ :\ "%r",\ "captured_request_headers"\ :\ "%hrl",\ "captures_response_headers"\ :\ "%hsl"\ }

    #
    ###

    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    
    acl has_header hdr_sub(user-agent) Android
    
    use_backend test_route_1::service_b if has_header
    
    
    acl has_header hdr_cnt(X-VAMP-TEST) gt 0
    
    use_backend test_route_1::service_b if has_header
    
    

    default_backend test_route_1


frontend test_route_1::service_a
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {\ "timestamp"\ :\ %t,\ "frontend"\ :\ "%f",\ "method"\ :\ "%r",\ "captured_request_headers"\ :\ "%hrl",\ "captures_response_headers"\ :\ "%hsl"\ }

    #
    ###

    
    bind unix@/var/run//vamp.ac2603847c7b5e8994275dfbf4da0bd1.sock accept-proxy
    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend test_route_1::service_a


frontend test_route_1::service_b
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {\ "timestamp"\ :\ %t,\ "frontend"\ :\ "%f",\ "method"\ :\ "%r",\ "captured_request_headers"\ :\ "%hrl",\ "captures_response_headers"\ :\ "%hsl"\ }

    #
    ###

    
    bind unix@/var/run//vamp.fcdeb6529dadd8431092fb961656ac75.sock accept-proxy
    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend test_route_1::service_b


frontend test_route_2
    
    bind 0.0.0.0:9026
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {\ "timestamp"\ :\ %t,\ "frontend"\ :\ "%f",\ "method"\ :\ "%r",\ "captured_request_headers"\ :\ "%hrl",\ "captures_response_headers"\ :\ "%hsl"\ }

    #
    ###

    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    
    acl uses_internet_explorer hdr_sub(user-agent) MSIE
    
    use_backend test_route_2::service_b if uses_internet_explorer
    
    

    default_backend test_route_2


frontend test_route_2::service_a
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {\ "timestamp"\ :\ %t,\ "frontend"\ :\ "%f",\ "method"\ :\ "%r",\ "captured_request_headers"\ :\ "%hrl",\ "captures_response_headers"\ :\ "%hsl"\ }

    #
    ###

    
    bind unix@/var/run//vamp.5486d4bd41a15362eee4a59ac69ab094.sock accept-proxy
    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend test_route_2::service_a


frontend test_route_2::service_b
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {\ "timestamp"\ :\ %t,\ "frontend"\ :\ "%f",\ "method"\ :\ "%r",\ "captured_request_headers"\ :\ "%hrl",\ "captures_response_headers"\ :\ "%hsl"\ }

    #
    ###

    
    bind unix@/var/run//vamp.616f0ad759584d68ae1c3c9bfcd4224f.sock accept-proxy
    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend test_route_2::service_b






backend test_route_1
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    
        server test_route_1::service_a unix@/var/run//vamp.ac2603847c7b5e8994275dfbf4da0bd1.sock send-proxy weight 50
    
        server test_route_1::service_b unix@/var/run//vamp.fcdeb6529dadd8431092fb961656ac75.sock send-proxy weight 50
    





backend test_route_1::service_a
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    option forwardfor
   

   http-response set-header X-Vamp-Server-Name %s
   http-response set-header X-Vamp-Server-ResponseTime %t

   

    cookie vamp_srv insert indirect nocache httponly maxidle 5m maxlife 1h 
    
        server paas.55f73f0d-6087-4964-a70e-b1ca1d5b24cd 192.168.59.103:8081  cookie paas.55f73f0d-6087-4964-a70e-b1ca1d5b24cd  weight 100 maxconn 1000  
    
    
    
    
    
    
    
    
    
    
    





backend test_route_1::service_b
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    option forwardfor
   

   http-response set-header X-Vamp-Server-Name %s
   http-response set-header X-Vamp-Server-ResponseTime %t

   

    cookie vamp_srv insert indirect nocache httponly maxidle 5m maxlife 1h 
    
        server paas.fb76ea52-098f-4e2a-abbe-0238c3d48480 192.168.59.103:8082  cookie paas.fb76ea52-098f-4e2a-abbe-0238c3d48480  weight 100 maxconn 1000  
    
    
    
    
    
    
    
    
    
    
    





backend test_route_2
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    
        server test_route_2::service_a unix@/var/run//vamp.5486d4bd41a15362eee4a59ac69ab094.sock send-proxy weight 30
    
        server test_route_2::service_b unix@/var/run//vamp.616f0ad759584d68ae1c3c9bfcd4224f.sock send-proxy weight 70
    





backend test_route_2::service_a
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    option forwardfor
   

   http-response set-header X-Vamp-Server-Name %s
   http-response set-header X-Vamp-Server-ResponseTime %t

   

    cookie vamp_srv insert indirect nocache httponly maxidle 5m maxlife 1h 
    
        server paas.55f73f0d-6087-4964-a70e-b1ca1d5b24cd 192.168.2.2:8081  cookie paas.55f73f0d-6087-4964-a70e-b1ca1d5b24cd  weight 100 maxconn 1000  
    
    
    
    
    
    
    
    
    
    
    





backend test_route_2::service_b
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    option forwardfor
   

   http-response set-header X-Vamp-Server-Name %s
   http-response set-header X-Vamp-Server-ResponseTime %t

   

    cookie vamp_srv insert indirect nocache httponly maxidle 5m maxlife 1h 
    
        server paas.fb76ea52-098f-4e2a-abbe-0238c3d48480 192.168.2.2:8082  cookie paas.fb76ea52-098f-4e2a-abbe-0238c3d48480  weight 100 maxconn 1000  
    
    
    
    
    
    
    
    
    
    
    





backend abusers
    mode http
    errorfile 409 /Users/tim/gocode/src/github.com/magneticio/vamp-router/configuration/error_pages/500rate.http

### END GENERATED SECTION ###
