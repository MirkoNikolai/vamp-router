global
 pidfile /tmp/haproxy-private.pid

 daemon
 maxconn 4096
 stats socket /tmp/haproxy.stats.sock level admin


 ###
 #
 # Experimental: Logging Setup
 #
 # We log to a unix socket and read that socket from the Go program
 #
 #
 #log /var/run/vamp.log.sock local0

 defaults
   log global
   mode http
   option dontlognull
   option redispatch
   option clitcpka
   option srvtcpka
   option http-keep-alive

   retries 3
   maxconn 500000

   # slowloris protection: clients should send their full http request in the configured time
   timeout http-request 5s

   timeout connect 5000ms
   timeout client 50000ms
   timeout server 50000ms

listen stats :1988
   mode http
   stats enable
   stats uri /
   stats refresh 2s
   stats realm Haproxy\ Stats
   stats auth showme:showme

### BEGIN GENERATED SECTION ###

frontend test_fe_1
    
    bind 0.0.0.0:8000
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {\ "timestamp"\ :\ %t,\ "frontend"\ :\ "%f",\ "method"\ :\ "%r",\ "captured_request_headers"\ :\ "%hrl",\ "captures_response_headers"\ :\ "%hsl"\ }

    #
    ###

    

    mode http
     option http-server-close

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # start HTTP spike limit generation

        stick-table type ip size 200k expire 10s store http_req_rate(5)

        # values below are specific to the backend
        # track the request and set ACL's
        tcp-request content  track-sc1 src
        acl marked_as_abuser  sc1_http_req_rate gt 100

        use_backend abusers if marked_as_abuser

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # ACL Management
    #

    
    acl uses_internetexplorer hdr_sub(user-agent) MSIE
    use_backend test_be_1_b if uses_internetexplorer
    

    default_backend test_be_1


frontend test_fe_1_a
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {\ "timestamp"\ :\ %t,\ "frontend"\ :\ "%f",\ "method"\ :\ "%r",\ "captured_request_headers"\ :\ "%hrl",\ "captures_response_headers"\ :\ "%hsl"\ }

    #
    ###

    
    bind unix@/tmp/vamp_test_be_1_a.sock accept-proxy
    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # ACL Management
    #

    

    default_backend test_be_1_a






backend test_be_1
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    
        server test_be_1_a unix@/tmp/vamp_test_be_1_a.sock send-proxy weight 100
    





backend test_be_1_a
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    option forwardfor
   

   http-response set-header X-Vamp-Server-Name %s
   http-response set-header X-Vamp-Server-ResponseTime %t

   

    cookie vamp_srv insert httponly maxidle 5m maxlife 1h 
    
        server test_be1_a_1 192.168.59.103:8081  cookie test_be1_a_1  weight 100 maxconn 1000  
        server test_be1_a_2 192.168.59.103:8082  cookie test_be1_a_2  weight 100 maxconn 1000  
    
    
    
    
    
    
    
    
    
    
    





backend test_be_1_b
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    option forwardfor
   

   http-response set-header X-Vamp-Server-Name %s
   http-response set-header X-Vamp-Server-ResponseTime %t

   

    cookie vamp_srv insert httponly maxidle 5m maxlife 1h 
    
        server test_be1_b_1 192.168.59.103:8083  cookie test_be1_b_1  weight 100 maxconn 1000  
    
    
    
    
    
    
    
    
    
    
    





### END GENERATED SECTION ###

backend abusers
    mode http
    errorfile 409 configuration/error_pages/500rate.http